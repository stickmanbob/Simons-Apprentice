{"version":3,"sources":["assets/redSprite.gif","assets/yellowSprite.gif","assets/greenSprite.gif","assets/blueSprite.gif","assets/redOrb.png","assets/greenOrb.png","assets/yellowOrb.png","assets/blueOrb.png","components/gameOver.jsx","components/interRound.jsx","components/summoningCircle.jsx","components/game.jsx","constants.js","components/highScores.jsx","App.jsx","index.js"],"names":["module","exports","GameOver","props","state","showHSInput","name","highScore","updateHighScores","bind","handleNameChange","rank","this","highScoreList","JSON","parse","localStorage","data","scores","length","setState","highScoreRank","e","preventDefault","target","value","placeholder","onChange","type","onClick","reset","to","pop","push","sort","player1","player2","stringify","message","id","navButtons","React","Component","InterRound","nextRound","SummoningCircle","sprite","className","COLORS","Game","currentSprite","loaded","sequence","currentGuess","gameState","score","disableInputs","handleInput","fetchSprites","playSequence","resetGame","sprites","red","src","require","alt","yellow","green","blue","newSequence","Array","from","newColor","Math","floor","random","i","sleep","time","Promise","res","setTimeout","updateSequence","buttonColor","a","newSprite","nextGuess","gameOver","mainWindow","startButton","enableButtons","selectMessage","HighScores","console","log","map","player","idx","key","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,kKCgBtBC,E,kDAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAGDC,MAAQ,CACTC,aAAa,EACbC,KAAM,aACNC,WAAW,GAIf,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAZV,E,gEAeE,IAERE,EAASC,KAAKT,MAAdQ,KAGRC,KAAKC,cAAgBC,KAAKC,MAAMC,aAAaC,MAAMC,QAI/CP,EAAOC,KAAKC,cAAcD,KAAKC,cAAcM,OAAS,GAAGR,MACrDC,KAAKC,cAAcM,OAAS,IAAMR,EAAO,IAE7CC,KAAKQ,SAAS,CACVf,aAAa,EACbgB,eAAe,M,uCAMVC,GACbA,EAAEC,iBAEFX,KAAKQ,SAAS,CACVd,KAAMgB,EAAEE,OAAOC,U,mCAMnB,OAAKb,KAAKR,MAAMC,YAWR,8BACI,2BAAOqB,YAAY,8BAA8BC,SAAUf,KAAKF,iBAAkBe,MAAOb,KAAKR,MAAME,KAAMsB,KAAK,SAC/G,4BAAQA,KAAK,SAASC,QAASjB,KAAKJ,kBAApC,WAXJ,6BACI,4BAAQqB,QAASjB,KAAKT,MAAM2B,OAA5B,aACA,kBAAC,IAAD,CAAMC,GAAG,gBAAT,mB,uCAgBCT,GACbA,EAAEC,iBAEF,IAAMjB,EAAOM,KAAKR,MAAME,KAClBK,EAAOC,KAAKT,MAAMQ,KAErBC,KAAKC,cAAcM,QAAS,IAAIP,KAAKC,cAAcmB,MAEtDpB,KAAKC,cAAcoB,KAAK,CAAE3B,KAAMA,EAAMK,KAAMA,IAC5CC,KAAKC,cAAcqB,MAAK,SAACC,EAASC,GAAV,OAAsBA,EAAQzB,KAAOwB,EAAQxB,QAErEK,aAAaC,KAAOH,KAAKuB,UAAU,CAC/BnB,OAAQN,KAAKC,gBAGjBD,KAAKQ,SAAS,CACVf,aAAa,M,+BAKZ,IAKDiC,EAHI3B,EAASC,KAAKT,MAAdQ,KAUR,OALI2B,EAJgB1B,KAAKR,MAAnBG,UAIQ,0FAAgEI,EAAhE,KAEA,+DAAqCA,EAArC,KAIV,6BAAS4B,GAAG,aAER,sDAECD,EAIA1B,KAAK4B,kB,GA7GgBC,IAAMC,WCF7B,SAASC,EAAT,GAAuC,IAAlBC,EAAiB,EAAjBA,UAAWjC,EAAM,EAANA,KAE3C,OACI,6BACI,oDACA,gDAAsBA,GAEtB,4BAAQkB,QAASe,GAAjB,eCjBG,SAASC,EAAT,GAAmC,IAATC,EAAQ,EAARA,OAErC,OAEI,yBAAKC,UAAU,oBACVD,GCWb,IAAME,EAAS,CAAC,MAAO,OAAQ,SAAU,SAEpBC,E,kDAEjB,WAAY9C,GAAO,IAAD,8BACd,cAAMA,IAGDC,MAAQ,CACT8C,cAAe,KACfC,QAAO,EACPC,SAAU,CAAC,OACXC,aAAc,EACdC,UAAW,QACXC,MAAO,EACPC,eAAe,GAMnB,EAAKC,YAAc,EAAKA,YAAYhD,KAAjB,gBACnB,EAAKiD,aAAe,EAAKA,aAAajD,KAAlB,gBACpB,EAAKkD,aAAe,EAAKA,aAAalD,KAAlB,gBACpB,EAAKmD,UAAY,EAAKA,UAAUnD,KAAf,gBACjB,EAAKmC,UAAY,EAAKA,UAAUnC,KAAf,gBArBH,E,gEAyBdG,KAAK8C,eACL9C,KAAKQ,SAAS,CAAC+B,QAAQ,M,qCAOvBvC,KAAKiD,QAAU,CACXC,IAAK,yBAAKC,IAAKC,EAAQ,IAA4BC,IAAI,QACvDC,OAAQ,yBAAKH,IAAKC,EAAQ,IAA+BC,IAAI,WAC7DE,MAAO,yBAAKJ,IAAKC,EAAQ,IAA8BC,IAAI,UAC3DG,KAAM,yBAAKL,IAAKC,EAAQ,IAA6BC,IAAI,Y,uCAQ7D,IAAII,EAAcC,MAAMC,KAAK3D,KAAKR,MAAMgD,UAGpCoB,EAAWxB,EAAOyB,KAAKC,MAAoB,EAAdD,KAAKE,WAGtCN,EAAYpC,KAAKuC,GAEjB5D,KAAKQ,SAAS,CAAEgC,SAAUiB,M,wJAKE,eAAzBzD,KAAKR,MAAMkD,U,gCAAkC1C,KAAKQ,SAAS,CAACkC,UAAW,e,OAElEsB,EAAI,E,YAAGA,EAAIhE,KAAKR,MAAMgD,SAASjC,Q,wBAGnCP,KAAKQ,SAAS,CAAE8B,cAAetC,KAAKiD,QAAQjD,KAAKR,MAAMgD,SAASwB,M,SAG1DhE,KAAKiE,MCnFS,M,cDuFjBD,IAAMhE,KAAKR,MAAMgD,SAASjC,OAAO,EAChCP,KAAKQ,SAAS,CACV8B,cAAe,KACfM,eAAe,EACfF,UAAW,gBAGf1C,KAAKQ,SAAS,CAAE8B,cAAe,O,UAK7BtC,KAAKiE,MAAM,K,QAtB2BD,I,kJA4B9CE,GACF,OAAO,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,Q,kCAI1ClE,KAAKQ,SAAS,CACV8B,cAAe,KACfG,aAAczC,KAAKR,MAAMiD,aAAe,EACxCG,eAAe,M,kCAOnB5C,KAAKsE,iBAGLtE,KAAKQ,SAAS,CACV8B,cAAe,KACfI,UAAW,GACXD,aAAc,EACdG,eAAe,IAInB5C,KAAK+C,iB,kCAIL/C,KAAKQ,SAAS,CACV8B,cAAe,KACfE,SAAU,CAAC,OACXC,aAAc,EACdC,UAAW,QACXC,MAAO,M,iCAKX3C,KAAKQ,SAAS,CACVkC,UAAW,WACXE,eAAe,M,kCAIX2B,GAAa,IAAD,OAGpB,OAAGvE,KAAKR,MAAMoD,cAAsB,SAAClC,GAAD,OAAOA,EAAEC,kBAG7C,uCAAO,WAAOD,GAAP,qBAAA8D,EAAA,yDAEH9D,EAAEC,iBAFC,EAI8B,EAAKnB,MAAhCgD,EAJH,EAIGA,SAAUC,EAJb,EAIaA,aAGb8B,IAAgB/B,EAASC,GAPzB,wBAUKgC,EAAY,EAAKxB,QAAQsB,IAAgB,KAG7C,EAAK/D,SAAS,CACV8B,cAAemC,EACf7B,eAAe,IAfpB,SAmBO,EAAKqB,MC7KM,MD0JlB,OAsBIxB,IAAiBD,EAASjC,OAAQ,EAEjC,EAAKC,SAAS,CACVkC,UAAW,aACXJ,cAAe,KACfK,MAAO,EAAKnD,MAAMmD,MAAQ,EAC1BC,eAAe,IAKnB,EAAK8B,YAjCV,wBAqCC,EAAKC,WArCN,4CAAP,wD,sCAgDA,OAFgB3E,KAAKR,MAAMkD,WAGvB,IAAK,aACD,OACI,gDAER,IAAK,cACD,OACI,0FAER,IAAK,QACD,OACI,gEAER,QACI,OAAO,Q,+BAMf,IAKIkC,EALAlC,EAAY1C,KAAKR,MAAMkD,UACvB3C,EAAOC,KAAKR,MAAMmD,MAEtB,IAAI3C,KAAKR,MAAM+C,OAAQ,OAAO,KAI9B,OAAOG,GACH,IAAK,WACD,OAAO,kBAAC,EAAD,CAAU3C,KAAMC,KAAKR,MAAMmD,MAAOzB,MAAOlB,KAAKgD,YAEzD,IAAK,QACD,IAAI6B,EAAc,4BAAQ5D,QAASjB,KAAK+C,cAAtB,gBAClB6B,EAAa,kBAAC3C,EAAD,CAAiBC,OAAQ2C,IACtC,MAEJ,IAAK,aACD,OAAO,kBAAC9C,EAAD,CAAYhC,KAAMA,EAAMiC,UAAWhC,KAAKgC,YAEnD,QACI4C,EAAc,kBAAC3C,EAAD,CAAiBC,OAAQlC,KAAKR,MAAM8C,gBAK1D,IAAIwC,EAAgB9E,KAAKR,MAAMoD,cAAgB,GAAK,SAEhDlB,EAAU1B,KAAK+E,gBAEnB,OAEI,6BAASpD,GAAG,QAEPD,EAED,yBAAKS,UAAU,eACVyC,GAGL,yBAAKzC,UAAU,gBAEX,yBAAKA,UAAS,kBAAa2C,GAAiB3B,IAAKC,EAAQ,IAAyBnC,QAASjB,KAAK6C,YAAY,SAE5G,yBAAKV,UAAS,oBAAe2C,GAAiB3B,IAAKC,EAAQ,IAA2BnC,QAASjB,KAAK6C,YAAY,WAEhH,yBAAKV,UAAS,qBAAgB2C,GAAiB3B,IAAKC,EAAQ,IAA4BnC,QAASjB,KAAK6C,YAAY,YAElH,yBAAKV,UAAS,mBAAc2C,GAAiB3B,IAAKC,EAAQ,IAA0BnC,QAASjB,KAAK6C,YAAY,WAGlH,6BACI,0BAAMV,UAAU,gBAAhB,oBAAiDpC,S,GArQnC8B,IAAMC,WETzB,SAASkD,IAEpB,IAAI/E,EAAgBC,KAAKC,MAAMC,aAAaC,MAAMC,OAGlD,OADA2E,QAAQC,IAAIjF,GAER,6BAAS0B,GAAG,eACR,mDAGI1B,EAAckF,KAAI,SAACC,EAAQC,GACvB,OAAO,yBAAKC,IAAKD,GACb,4BAAKD,EAAO1F,MACZ,4BAAK0F,EAAOrF,UAKxB,kBAAC,IAAD,CAAMoB,GAAG,SAAT,gBCcGoE,MAzBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKpD,UAAU,OACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOqD,KAAK,SACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAACR,EAAD,OAGF,kBAAC,IAAD,CAAOQ,KAAK,KACV,kBAAC,IAAD,CAAMrE,GAAG,SAAT,cC9BZsE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.cd524fbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/redSprite.829b5c15.gif\";","module.exports = __webpack_public_path__ + \"static/media/yellowSprite.49a3dbf3.gif\";","module.exports = __webpack_public_path__ + \"static/media/greenSprite.ea067f66.gif\";","module.exports = __webpack_public_path__ + \"static/media/blueSprite.b6c13a15.gif\";","module.exports = __webpack_public_path__ + \"static/media/redOrb.50e75402.png\";","module.exports = __webpack_public_path__ + \"static/media/greenOrb.0ecc18da.png\";","module.exports = __webpack_public_path__ + \"static/media/yellowOrb.ea689330.png\";","module.exports = __webpack_public_path__ + \"static/media/blueOrb.fd1f041c.png\";","///////////////// Game Over ////////////////\n// Displays the game over screen, and handles logic to\n// add new high scores\n// \n// Props:\n// - rank (integer) : the final score of the player\n// - reset (function) : a function to reset the game\n//\n\n//Imports\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Main\n\nexport default class GameOver extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        // Initialize state\n        this.state = {\n            showHSInput: false,\n            name: \"Apprentice\",\n            highScore: true\n        }\n\n        // Function Bindings\n        this.updateHighScores = this.updateHighScores.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);  \n    }\n\n    componentDidMount(){\n        \n        const { rank } = this.props;\n\n        //Fetch the current high scores\n        this.highScoreList = JSON.parse(localStorage.data).scores;\n\n        // If the player's rank is higher than the lowest high score, \n        // render a modified different screen\n        if (rank > this.highScoreList[this.highScoreList.length - 1].rank \n            || (this.highScoreList.length < 15 && rank > 0)) {\n\n            this.setState({\n                showHSInput: true,\n                highScoreRank: true\n            })\n\n        }\n    }\n\n    handleNameChange(e){\n        e.preventDefault();\n\n        this.setState({\n            name: e.target.value\n        })\n    }\n\n    navButtons(){\n\n        if (!this.state.showHSInput){\n            return (\n                <nav>\n                    <button onClick={this.props.reset}>Try Again</button>\n                    <Link to=\"/high-scores\">Honor Scroll</Link>\n                </nav>\n                \n            )\n        } else {\n            return (\n\n                <form>\n                    <input placeholder=\"Enter your name, Apprentice\" onChange={this.handleNameChange} value={this.state.name} type=\"text\"/>\n                    <button type=\"submit\" onClick={this.updateHighScores}>Accept</button>\n                </form>\n            )\n        }\n\n    }\n\n    updateHighScores(e){\n        e.preventDefault();\n\n        const name = this.state.name;\n        const rank = this.props.rank;\n\n        if(this.highScoreList.length >=15) this.highScoreList.pop(); \n\n        this.highScoreList.push({ name: name, rank: rank});\n        this.highScoreList.sort((player1, player2) => player2.rank - player1.rank);\n\n        localStorage.data = JSON.stringify({\n            scores: this.highScoreList\n        })\n\n        this.setState({\n            showHSInput: false,\n        })\n    }\n\n\n    render(){\n\n        const { rank } = this.props;\n        let { highScore } = this.state;\n        \n        let message;\n        if(highScore) {\n            message = <h2>but you made the Honor Scroll for reaching apprentice rank {rank}!</h2>\n        } else{\n            message = <h2>but you reached apprentice rank {rank}!</h2>\n        }\n\n        return (\n            <section id=\"game-over\">\n\n                <h1>You Fizzled the Spell!</h1>\n\n                {message} \n\n\n\n                {this.navButtons()}\n            </section>\n        )\n    }\n    \n}\n","//////////// Inter Round Dialog Box ///////////////////\n// \n// Pops up between rounds to give the player a break\n//\n// Props:\n// - nextRound (function) : function to advance the game and begin the next round\n// - rank (int) : player's current score\n\n//Imports\n\nimport React from \"react\";\n\n// Main\n\nexport default function InterRound({nextRound, rank}){\n\n    return (\n        <div>\n            <h1>Good Job, Apprentice</h1>\n            <h2>You are now rank {rank}</h2>\n\n            <button onClick={nextRound}>Next Spell</button>\n        </div>\n    )\n}","\nimport React from 'react';\n\n\nexport default function SummoningCircle({sprite}){\n    \n    return(\n\n        <div className=\"summoning-circle\">\n            {sprite}\n        </div>\n    )\n}","///////////// Game /////////////////\n//\n// Renders the game itself and handles game logic\n// \n// Props:\n\n\n// Imports\n\n  //Utils\n  import React from 'react';\n  import { SIMON_GIF_LENGTH, PLAYER_GIF_LENGTH } from '../constants';\n\n  //Components\n  import GameOver from './gameOver';\n  import InterRound from './interRound';\n  import SummoningCircle from './summoningCircle';\n\n//Main\n\nconst COLORS = [\"red\", \"blue\", \"yellow\", \"green\"]; \n\nexport default class Game extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        //Set inital game state\n        this.state = {\n            currentSprite: null,\n            loaded:false,\n            sequence: [\"red\"],\n            currentGuess: 0,\n            gameState: \"start\",\n            score: 0,\n            disableInputs: true \n        }\n\n        \n\n        // Function Bindings\n        this.handleInput = this.handleInput.bind(this); \n        this.fetchSprites = this.fetchSprites.bind(this); \n        this.playSequence = this.playSequence.bind(this); \n        this.resetGame = this.resetGame.bind(this);\n        this.nextRound = this.nextRound.bind(this); \n    }\n\n    componentDidMount(){\n        this.fetchSprites();\n        this.setState({loaded: true})\n    }\n\n    fetchSprites(){\n\n        // Fetch the sprites\n\n        this.sprites = {\n            red: <img src={require(\"../assets/redSprite.gif\")} alt=\"red\" />,\n            yellow: <img src={require(\"../assets/yellowSprite.gif\")} alt=\"yellow\" />,\n            green: <img src={require(\"../assets/greenSprite.gif\")} alt=\"green\" />,\n            blue: <img src={require(\"../assets/blueSprite.gif\")} alt=\"blue\" />\n        }\n    \n    }\n\n    updateSequence(){\n        \n        // Create a copy of the old sequence to avoid mutating state\n        let newSequence = Array.from(this.state.sequence);\n\n        //Generate a random new color\n        let newColor = COLORS[Math.floor(Math.random()*4)];\n\n        //Add to sequence and update state\n        newSequence.push(newColor);\n\n        this.setState({ sequence: newSequence });\n\n    }\n\n    async playSequence(){\n        if(this.state.gameState !== 'simon-turn') await this.setState({gameState: 'simon-turn'}); \n        //Play the current sequence\n        for(let i = 0; i < this.state.sequence.length ; i++){\n\n            // Display an elemental\n            this.setState({ currentSprite: this.sprites[this.state.sequence[i]] } );\n            \n            //Wait for the gif to end\n            await this.sleep(SIMON_GIF_LENGTH);\n            \n            //Remove the Elemental, and control to the player if its the last one\n\n            if(i === this.state.sequence.length-1){\n                this.setState({\n                    currentSprite: null,\n                    disableInputs: false,\n                    gameState: \"player-turn\"\n                }) \n            } else{\n                this.setState({ currentSprite: null, })\n\n            }\n            \n            //Give a gap between Elementals\n            await this.sleep(400);     \n            \n        }\n        \n    }\n\n    sleep(time) {\n        return new Promise(res => setTimeout(res, time));\n    }\n\n    nextGuess(){\n        this.setState({\n            currentSprite: null,\n            currentGuess: this.state.currentGuess + 1,\n            disableInputs: false,\n        })\n    }\n\n    nextRound(){\n\n        // First, add a new elemental to the sequence\n        this.updateSequence(); \n\n        // Reset the game board\n        this.setState({\n            currentSprite: null,\n            gameState: \"\",\n            currentGuess: 0,\n            disableInputs: true\n        })\n\n        // Play the new sequence\n        this.playSequence(); \n    }\n\n    resetGame(){\n        this.setState({\n            currentSprite: null,\n            sequence: [\"red\"],\n            currentGuess: 0,\n            gameState: \"start\",\n            score: 0\n        })\n    }\n\n    gameOver(){\n        this.setState({\n            gameState: \"gameOver\",\n            disableInputs: true \n        })\n    }\n\n    handleInput(buttonColor){\n        \n        // If buttons are disabled, return a handler that does nothing\n        if(this.state.disableInputs) return (e) => e.preventDefault(); \n\n        // Return an event handler that has access to the buttonColor parameter\n        return async (e) =>{\n            \n            e.preventDefault();\n\n            var { sequence, currentGuess } = this.state;\n\n            // Check if the input is correct\n            if(buttonColor === sequence[currentGuess]){ // If its a correct guess:\n                \n                // Decide which sprite to render next based on buttonColor parameter\n                let newSprite = this.sprites[buttonColor] || null;\n\n                // Update the current sprite in state and prevent further inputs\n                this.setState({\n                    currentSprite: newSprite,\n                    disableInputs: true, \n                })\n\n                // Wait for the gif to play\n                await this.sleep(PLAYER_GIF_LENGTH);\n\n                // If that was the last item, go to the inter round screen\n                if(currentGuess === sequence.length -1){\n                    \n                    this.setState({\n                        gameState: \"interRound\",\n                        currentSprite: null,\n                        score: this.state.score + 1,\n                        disableInputs: true,\n                    });\n                \n                // Otherwise, let the user keep summoning elementals\n                } else {\n                    this.nextGuess(); \n                }\n            \n            } else { // On a wrong guess, end the game\n                this.gameOver();\n            }\n   \n\n        }\n        \n    }\n\n    selectMessage(){\n        let gameState = this.state.gameState;\n\n        switch (gameState){\n            case \"simon-turn\":\n                return (\n                    <h1>Watch closely...</h1>\n                );\n            case \"player-turn\":\n                return(\n                    <h1>Use the Orbs to Summon the Elementals in the Correct Order</h1>\n                );\n            case \"start\":\n                return (\n                    <h1>We will begin when you are ready</h1>\n                )\n            default:\n                return null;\n        }\n    }\n\n    render(){\n\n        let gameState = this.state.gameState;\n        let rank = this.state.score;\n\n        if(!this.state.loaded) return null;\n\n        let mainWindow;\n\n        switch(gameState){\n            case 'gameOver':\n                return <GameOver rank={this.state.score} reset={this.resetGame} />;\n\n            case 'start':\n                let startButton = <button onClick={this.playSequence}>Begin Spell!</button>;\n                mainWindow = <SummoningCircle sprite={startButton} />\n                break;\n\n            case 'interRound':\n                return <InterRound rank={rank} nextRound={this.nextRound} />\n            \n            default:\n                mainWindow =  <SummoningCircle sprite={this.state.currentSprite}/>\n            \n        }\n        \n\n        let enableButtons = this.state.disableInputs ? \"\" : \"enable\"\n\n        let message = this.selectMessage();\n\n        return(\n            \n            <section id=\"game\">\n\n                {message}\n\n                <div className=\"main-window\">\n                    {mainWindow}\n                </div>\n\n                <div className=\"game-buttons\">\n                    \n                    <img className={`orb red ${enableButtons}`} src={require(\"../assets/redOrb.png\")} onClick={this.handleInput(\"red\")}/>\n\n                    <img className={`orb green ${enableButtons}`} src={require(\"../assets/greenOrb.png\")} onClick={this.handleInput(\"green\")}/>\n                        \n                    <img className={`orb yellow ${enableButtons}`} src={require(\"../assets/yellowOrb.png\")} onClick={this.handleInput(\"yellow\")}/>\n\n                    <img className={`orb blue ${enableButtons}`} src={require(\"../assets/blueOrb.png\")} onClick={this.handleInput(\"blue\")}/>\n\n                </div>\n                <div>\n                    <span className=\"rank-counter\">Apprentice Rank: {rank}</span>\n                </div>\n            </section>\n        );\n    }\n}","//////////////// Constants /////////////////////////\n//\n// Dashboard file for modifying game constants \n//\n\n\n//Length of Simon's elemental gifs, in ms\nexport const SIMON_GIF_LENGTH = 1300;\n\n//Length of Player's elemental gifs, in ms\nexport const PLAYER_GIF_LENGTH = 1300;\n","/////////////// High Score Screen ////////////////////\n// \n// Renders the high score screen. Scores are stored in local storage\n//\n// Props:\n//\n\n// Imports\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n//Main\n\nexport default function HighScores(){\n    \n    let highScoreList = JSON.parse(localStorage.data).scores; \n\n    console.log(highScoreList); \n    return(\n        <section id=\"high-scores\">\n            <h1>Honored Apprentices</h1>\n\n            {\n                highScoreList.map((player, idx) => {\n                    return <div key={idx}>\n                        <h3>{player.name}</h3>\n                        <h3>{player.rank}</h3>\n                    </div>\n                })\n            }\n\n            <Link to=\"/game\">Play Again!</Link>\n        </section>\n\n    )\n}","///////////////// App.js /////////////////////////////\n// Entry point into the React App\n//\n\n//Imports\n\n  //Utils\n    import React from 'react';\n\n    import './styles/index.scss';\n\n    import { HashRouter, Switch, Route, Link } from 'react-router-dom';\n\n  //Components\n    import Game from \"./components/game\";\n\nimport HighScores from './components/highScores';\n\n\n//Main\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Switch>\n\n          <Route path=\"/game\">\n            <Game />\n          </Route>\n          \n          <Route path=\"/high-scores\">\n            <HighScores />\n          </Route>\n\n          <Route path=\"/\">\n            <Link to=\"/game\">Play!</Link>\n          </Route>\n          \n        </Switch>\n          \n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}