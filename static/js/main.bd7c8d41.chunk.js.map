{"version":3,"sources":["assets/pentagram.png","assets/fizzle.gif","assets/redSprite.gif","assets/yellowSprite.gif","assets/greenSprite.gif","assets/blueSprite.gif","assets/greenOrb.png","assets/blueOrb.png","assets/redOrb.png","assets/yellowOrb.png","assets/lab4.jpg","assets/circle.jpg","assets/parchment.jpeg","utils/imageLoader.js","utils/constants.js","components/gameOver.jsx","components/summoningCircle.jsx","components/game.jsx","components/highScores.jsx","components/menu.jsx","components/header.jsx","components/instructions.jsx","App.jsx","index.js"],"names":["module","exports","preloadImages","urls","loadedCallback","loadedCount","totalImages","length","forEach","url","img","Image","src","onload","COLORS","MENU_IMG_URLS","require","GAME_IMAGE_URLS","GameOver","props","state","showHSInput","name","highScore","updateHighScores","bind","handleNameChange","rank","this","highScoreList","JSON","parse","localStorage","data","scores","lastPlayer","setState","e","preventDefault","target","value","maxLength","onChange","type","className","onClick","reset","to","pop","push","sort","player1","player2","stringify","message","id","navButtons","React","Component","SummoningCircle","contents","Game","currentSprite","loaded","sequence","randomColor","currentGuess","gameState","score","disableInputs","sprites","red","alt","yellow","green","blue","fizzle","handleInput","playSequence","resetGame","nextRound","Math","floor","random","newSequence","Array","from","newColor","sleep","i","time","Promise","res","setTimeout","updateSequence","buttonColor","a","newSprite","nextGuess","gameOver","startButton","draggable","nextButton","mainWindow","selectMainWindow","enableButtons","selectMessage","HighScores","map","player","idx","key","MainMenu","Header","Instructions","App","useState","menuLoaded","setMenuLoaded","gameLoaded","setGameLoaded","useEffect","header","window","innerHeight","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd7c8d41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pentagram.ae5d5114.png\";","module.exports = __webpack_public_path__ + \"static/media/fizzle.8c4e8a93.gif\";","module.exports = __webpack_public_path__ + \"static/media/redSprite.13af2104.gif\";","module.exports = __webpack_public_path__ + \"static/media/yellowSprite.947f1120.gif\";","module.exports = __webpack_public_path__ + \"static/media/greenSprite.99effb91.gif\";","module.exports = __webpack_public_path__ + \"static/media/blueSprite.6618db31.gif\";","module.exports = __webpack_public_path__ + \"static/media/greenOrb.0ecc18da.png\";","module.exports = __webpack_public_path__ + \"static/media/blueOrb.fd1f041c.png\";","module.exports = __webpack_public_path__ + \"static/media/redOrb.50e75402.png\";","module.exports = __webpack_public_path__ + \"static/media/yellowOrb.ea689330.png\";","module.exports = __webpack_public_path__ + \"static/media/lab4.632b6fa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/circle.b9ff05f9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/parchment.b190cd11.jpeg\";","export default function preloadImages(urls, loadedCallback) {\n    let loadedCount = 0;\n    let totalImages = urls.length;\n    \n    urls.forEach( (url) => {\n        let img = new Image();\n        img.src = url;\n        img.onload= () => {\n          \n            loadedCount ++;\n\n            // console.log(\"images loaded\", loadedCount);\n\n            if(loadedCount === totalImages) {\n                // console.log(\"all images loaded\")\n                loadedCallback(); \n            }\n        }\n    });\n    \n}","//////////////// Constants /////////////////////////\n//\n// Dashboard file for modifying game constants \n//\n\n\n// Length of Simon's elemental animations, in ms\nexport const SIMON_GIF_LENGTH = 700;\n\n// Length of Player's elemental animations, in ms\nexport const PLAYER_GIF_LENGTH = 700;\n\n// Length of Fizzle animation, in ms\nexport const FIZZLE_LENGTH = 1600;\n\n// Valid colors\nexport const COLORS = [\"red\", \"blue\", \"yellow\", \"green\"]; \n\n//Main Menu asset paths\nexport const MENU_IMG_URLS = [\n    require(\"../assets/lab4.jpg\")\n]\n\n// All game image asset paths\nexport const GAME_IMAGE_URLS = [\n    require(\"../assets/fizzle.gif\"),\n    require(\"../assets/redSprite.gif\"),\n    require(\"../assets/yellowSprite.gif\"),\n    require(\"../assets/greenSprite.gif\"),\n    require(\"../assets/blueSprite.gif\"),\n    require(\"../assets/circle.jpg\"),\n    require(\"../assets/pentagram.png\"),\n    require(\"../assets/greenOrb.png\"),\n    require(\"../assets/blueOrb.png\"),\n    require(\"../assets/redOrb.png\"),\n    require(\"../assets/yellowOrb.png\"),\n    require(\"../assets/parchment.jpeg\")\n]","///////////////// Game Over ////////////////\n// Displays the game over screen, and handles logic to\n// add new high scores\n// \n// Props:\n// - rank (integer) : the final score of the player\n// - reset (function) : a function to reset the game\n//\n\n//Imports\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Main\n\nexport default class GameOver extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        // Initialize state\n        this.state = {\n            showHSInput: false,\n            name: \"Apprentice\",\n            highScore: false\n        }\n\n        // Function Bindings\n        this.updateHighScores = this.updateHighScores.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);  \n    }\n\n    componentDidMount(){\n        \n        const { rank } = this.props;\n\n        //Fetch the current high scores\n        this.highScoreList = JSON.parse(localStorage.data).scores;\n\n        // If the player's rank is higher than the lowest high score, or\n        // there are fewer than 15 high scores, render the name input \n\n        //Avoid bugs due to empty score lists\n        let lastPlayer = this.highScoreList[this.highScoreList.length - 1] || {rank:0};\n\n        if ((this.highScoreList.length < 15 && rank > 0) || rank > lastPlayer.rank) {\n\n            this.setState({\n                showHSInput: true,\n                highScore: true\n            })\n\n        }\n    }\n\n    handleNameChange(e){\n        e.preventDefault();\n\n        this.setState({\n            name: e.target.value\n        })\n    }\n\n    navButtons(){\n\n        if (!this.state.showHSInput){\n            return (\n                <nav>\n                    <div onClick={this.props.reset} className=\"button\">Try Again</div>\n                    <Link to=\"/high-scores\" >Honor Scroll</Link>\n                </nav>\n                \n            )\n        } else {\n            return (\n\n                <form>\n                    <h3>Enter your name, Apprentice</h3>\n                    <input maxLength=\"20\" onChange={this.handleNameChange} value={this.state.name} type=\"text\"/>\n                    <input className=\"button\" value=\"Done\" type=\"submit\" onClick={this.updateHighScores}/>\n                </form>\n            )\n        }\n\n    }\n\n    updateHighScores(e){\n        e.preventDefault();\n\n        if(this.state.name.length === 0) return; \n\n        const name = this.state.name;\n        const rank = this.props.rank;\n\n        if(this.highScoreList.length >=15) this.highScoreList.pop(); \n\n        this.highScoreList.push({ name: name, rank: rank});\n        this.highScoreList.sort((player1, player2) => player2.rank - player1.rank);\n\n        localStorage.data = JSON.stringify({\n            scores: this.highScoreList\n        })\n\n        this.setState({\n            showHSInput: false,\n        })\n    }\n\n\n    render(){\n\n        const { rank } = this.props;\n        let { highScore } = this.state;\n        \n        let message;\n        if(highScore) {\n            message = <h3>...but you made the Honor Scroll for reaching Rank {rank}!</h3>\n        } else{\n            message = <h3>...but you reached Apprentice Rank {rank}!</h3>\n        }\n\n        return (\n            <section id=\"game-over\">\n\n                <h1>You Fizzled the Spell!</h1>\n\n                {message} \n\n                {this.navButtons()}\n            </section>\n        )\n    }\n    \n}\n","\nimport React from 'react';\n\n\nexport default function SummoningCircle({contents}){\n    \n    return(\n\n        <div className=\"summoning-circle\">\n            {contents}\n        </div>\n    )\n}","///////////// Game /////////////////\n//\n// Renders the game itself and handles game logic\n// \n// Props:\n// - loaded(boolean) : lets us know if the App component has loaded all our images yet\n\n\n// Imports\n\n  //Utils\n  import React from 'react';\n  import { SIMON_GIF_LENGTH, PLAYER_GIF_LENGTH, FIZZLE_LENGTH, COLORS, } from '../utils/constants';\n\n  //Components\n  import GameOver from './gameOver';\n  import SummoningCircle from './summoningCircle';\n\n    \n//Main\nexport default class Game extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        //Set inital game state\n        this.state = {\n            currentSprite: null,\n            loaded:true,\n            sequence: [this.randomColor()],\n            currentGuess: 0,\n            gameState: \"start\",\n            score: 0,\n            disableInputs: true \n        }\n\n        // Create references to sprites we will use here\n        this.sprites = {\n            red: <img className=\"elemental\" src={require(\"../assets/redSprite.gif\")} alt=\"red\" />,\n            yellow: <img className=\"elemental\" src={require(\"../assets/yellowSprite.gif\")} alt=\"yellow\" />,\n            green: <img className=\"elemental\" src={require(\"../assets/greenSprite.gif\")} alt=\"green\" />,\n            blue: <img className=\"elemental\" src={require(\"../assets/blueSprite.gif\")} alt=\"blue\" />,\n            fizzle: <img className=\"fizzle\" src={require(\"../assets/fizzle.gif\")} alt=\"fizzle!\" />,\n        }\n        \n\n        // Function Bindings\n        this.handleInput = this.handleInput.bind(this);  \n        this.playSequence = this.playSequence.bind(this); \n        this.resetGame = this.resetGame.bind(this);\n        this.nextRound = this.nextRound.bind(this); \n    }\n\n    randomColor(){\n        return COLORS[Math.floor(Math.random() * 4)];\n    }\n\n\n    updateSequence(){\n        \n        // Create a copy of the old sequence to avoid mutating state\n        let newSequence = Array.from(this.state.sequence);\n\n        //Generate a random new color\n        let newColor = this.randomColor();\n\n        //Add to sequence and update state\n        newSequence.push(newColor);\n\n        this.setState({ sequence: newSequence });\n\n    }\n\n    async playSequence(){\n        if(this.state.gameState !== 'simon-turn') this.setState({gameState: 'simon-turn'}); \n\n        //Pause before the sequence\n        await this.sleep(500);\n\n        //Play the current sequence\n        for(let i = 0; i < this.state.sequence.length ; i++){\n\n            // Display an elemental\n            this.setState({ currentSprite: this.sprites[this.state.sequence[i]] } );\n            \n            //Wait for the gif to end\n            await this.sleep(SIMON_GIF_LENGTH);\n            \n            //Remove the Elemental, and control to the player if its the last one\n\n            if(i === this.state.sequence.length-1){\n                \n                // Give a break, then pass control to the player\n                this.setState({\n                    currentSprite: null,\n                }) \n\n                await this.sleep(400); \n\n                this.setState({\n                    disableInputs: false,\n                    gameState: \"player-turn\"\n                })\n\n            } else{\n\n                this.setState({ currentSprite: null, })\n\n            }\n            \n            //Give a gap between Elementals\n            await this.sleep(400);     \n            \n        }\n        \n    }\n\n    sleep(time) {\n        return new Promise(res => setTimeout(res, time));\n    }\n\n    nextGuess(){\n        this.setState({\n            currentSprite: null,\n            currentGuess: this.state.currentGuess + 1,\n            disableInputs: false,\n        })\n    }\n\n    nextRound(){\n\n        // First, add a new elemental to the sequence\n        this.updateSequence(); \n\n        // Reset the game board\n        this.setState({\n            currentSprite: null,\n            gameState: \"\",\n            currentGuess: 0,\n            disableInputs: true\n        })\n\n        // Play the new sequence\n        this.playSequence(); \n    }\n\n    resetGame(){\n        this.setState({\n            currentSprite: null,\n            sequence: [\"red\"],\n            currentGuess: 0,\n            gameState: \"start\",\n            score: 0\n        })\n    }\n\n    async gameOver(){\n        \n        //Play the fizzle animation\n        this.setState({\n            currentSprite: this.sprites.fizzle,\n            disableInputs: true\n        })\n\n        await this.sleep(FIZZLE_LENGTH);\n\n        //Show the game over screen\n        this.setState({\n            gameState: \"gameOver\",\n        })\n    }\n\n    handleInput(buttonColor){\n        \n        // If buttons are disabled, return a handler that does nothing\n        if(this.state.disableInputs) return (e) => e.preventDefault(); \n\n        // Return an event handler that has access to the buttonColor parameter\n        return async (e) =>{\n            \n            e.preventDefault();\n\n            var { sequence, currentGuess } = this.state;\n\n            // Check if the input is correct\n            if(buttonColor === sequence[currentGuess]){ // If its a correct guess:\n                \n                // Decide which sprite to render next based on buttonColor parameter\n                let newSprite = this.sprites[buttonColor] || null;\n\n                // Update the current sprite in state and prevent further inputs\n                this.setState({\n                    currentSprite: newSprite,\n                    disableInputs: true, \n                })\n\n                // Wait for the gif to play\n                await this.sleep(PLAYER_GIF_LENGTH);\n\n                // If that was the last item, go to the inter round screen\n                if(currentGuess === sequence.length -1){ \n\n                    this.setState({\n                        currentSprite: null\n                    })\n                    \n                    await this.sleep(300);\n\n                    this.setState({\n                        gameState: \"interRound\",\n                        score: this.state.score + 1,\n                        disableInputs: true,\n                    });\n                \n                // Otherwise, let the user keep summoning elementals\n                } else {\n                    this.nextGuess(); \n                }\n            \n            } else { // On a wrong guess, end the game\n                this.gameOver();\n            }\n   \n\n        }\n        \n    }\n\n    selectMessage(){\n        let gameState = this.state.gameState;\n\n        switch (gameState){\n            case \"simon-turn\":\n                return (\n                    <h1>Watch closely...</h1>\n                );\n            case \"player-turn\":\n                return(\n                    <h1>Use the Orbs to Summon Elementals in the Correct Order</h1>\n                );\n            case \"start\":\n                return (\n                    <div>\n                        <h1>We will begin when you are ready</h1>\n                        <h3>Touch the red pentagram to begin</h3>\n                    </div>\n                    \n                )\n            case \"interRound\":\n                return(\n                    <div>\n                        <h1 className=\"victory\">Good Job, Apprentice!</h1>\n                        <h2>You have reached Rank {this.state.score}</h2>\n                        <h3>Touch the red pentagram to continue</h3>\n                    </div>\n                )\n            default:\n                return null;\n        }\n    }\n\n    selectMainWindow() {\n        let gameState = this.state.gameState;\n\n        switch (gameState) {\n\n            case 'start':\n                let startButton = <img className=\"start-button\" src={require(\"../assets/pentagram.png\")} draggable=\"false\" onClick={this.playSequence} alt=\"start\"/>;\n                return <SummoningCircle contents={startButton} />\n\n            case 'interRound':\n                let nextButton = <img className=\"start-button\" src={require(\"../assets/pentagram.png\")} draggable=\"false\" onClick={this.nextRound} alt=\"next round\"/>;\n                return <SummoningCircle contents={nextButton} />;\n\n            default:\n                return <SummoningCircle contents={this.state.currentSprite} />;\n        }\n    }\n\n\n    render(){\n\n        let rank = this.state.score;\n\n        if(!this.props.loaded) return (\n            <section>\n                <h1>Loading...</h1>\n                <div className=\"lds-circle\"><div></div></div>\n            </section>\n        );\n\n        if (this.state.gameState === \"gameOver\") return <GameOver rank={this.state.score} reset={this.resetGame} />;\n\n        let mainWindow = this.selectMainWindow();\n\n        let enableButtons = this.state.disableInputs ? \"\" : \"enable\"\n\n        let message = this.selectMessage();\n\n        return(\n            \n            <section id=\"game\">\n                <div className=\"message-box\">\n                    {message}\n                </div>\n                \n\n                <div className=\"main-window\">\n                    {mainWindow}\n                </div>\n\n                <div className=\"game-buttons\">\n                    \n                    <img className={`orb red ${enableButtons}`} draggable=\"false\" src={require(\"../assets/redOrb.png\")} onClick={this.handleInput(\"red\")} alt=\"red\"/>\n\n                    <img className={`orb green ${enableButtons}`} draggable=\"false\" src={require(\"../assets/greenOrb.png\")} onClick={this.handleInput(\"green\")} alt=\"green\"/>\n                        \n                    <img className={`orb yellow ${enableButtons}`} draggable=\"false\" src={require(\"../assets/yellowOrb.png\")} onClick={this.handleInput(\"yellow\")} alt=\"blue\"/>\n\n                    <img className={`orb blue ${enableButtons}`} draggable=\"false\" src={require(\"../assets/blueOrb.png\")} onClick={this.handleInput(\"blue\")} alt=\"yellow\"/>\n\n                </div>\n                <div>\n                    <span className=\"rank-counter\">Apprentice Rank: {rank}</span>\n                </div>\n            </section>\n        );\n    }\n}","/////////////// High Score Screen ////////////////////\n// \n// Renders the high score screen. Scores are stored in local storage\n//\n// Props:\n//\n\n// Imports\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n//Main\n\nexport default function HighScores(){\n    \n    let highScoreList = JSON.parse(localStorage.data).scores; \n \n    return(\n        <section id=\"high-scores\">\n            <h1>Honored Apprentices</h1>\n\n            <div className=\"score-table\">\n\n                <div className=\"column\">\n                    <h2>Name</h2>\n                    {highScoreList.map((player,idx)=>{\n                        return <h3 key={idx}>{player.name}</h3>\n                    })}\n                </div>\n\n                <div className=\"column\">\n                    <h2>Rank</h2>\n                    {highScoreList.map((player,idx) => {\n                        return <h3 key={idx}>{player.rank}</h3>\n                    })}\n                </div>\n\n            </div>\n            \n            <Link to=\"/game\" >Play Again!</Link>\n            <Link to=\"/\" >Main Menu</Link>\n        </section>\n\n    )\n}","////////////// Main Menu ////////////////////////////\n//\n// Has links to instructions , high scores, and game\n//\n\n//Imports\n  import React from \"react\";\n  import { Link } from \"react-router-dom\";\n\n\nexport default function MainMenu(){\n\n\n    return(\n        <section id=\"main-menu\">\n            <h1>Welcome, Apprentice</h1>\n            \n            <nav>\n                <Link to=\"/game\">Play</Link>\n                \n                <Link to=\"/instructions\">Instructions</Link>\n\n                <Link to=\"/high-scores\">High Scores</Link>\n            </nav>\n        </section>\n    )\n}","///////////// Header ///////////////////////\n//\n// A simple header\n//\n\nimport React from \"react\";\n\nexport default function Header(){\n\n    return(\n        <header id=\"header\">\n            <h1>\n                Simon's Apprentice\n            </h1>\n        </header>\n    )\n}","//////////////// Instructions ////////////////////////\n//\n// A simple list of instructions about the game\n//\n\n// Imports\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n//Main\n\nexport default function Instructions(){\n\n    return(\n        <section id='instructions'>\n            <h1>Instructions</h1>\n\n            <p>You are an aspiring magician, and are fortunate enough to have\n                recently been accepted as an apprentice by Simon, one of the \n                greatest sorcerers alive today. In order to earn his favor, you \n                must rise through the ranks of his other apprentices by successfully\n                casting spells. But beware, one wrong step and your spell will fizzle, \n                and Simon does not tolerate failure... \n            </p>\n\n            <ul>\n                <li>Each round, Simon will demonstrate a spell by summoning elementals \n                    in a particular order. Pay attention!\n                </li>\n\n                <li>\n                    Once Simon is done, you must use the four orbs of power\n                    on the bottom of the screen to summon the same \n                    elementals in the same order to complete the spell. \n                </li>\n\n                <li>\n                    Simply click on an orb to summon an elemental. The red orb summons\n                    red elementals, the blue one summons blue elementals, and so on. \n                </li>\n\n                <li>\n                    Beware, if you summon the wrong elemental the spell will fizzle, and \n                    you will be banished!\n                </li>\n\n                <li>\n                    The sequence of elementals stays the same from round to round, but \n                    gets longer each time. Cast as many spells as possible to place your name \n                    on the Honor Scroll!\n                </li>\n            </ul>\n\n            <Link to=\"/\">Back to Main Menu</Link>\n        </section>\n    )\n}","///////////////// App.js /////////////////////////////\n// Entry point into the React App\n//\n\n//Imports\n\n  //Utils\n    import React, { useState, useEffect } from 'react';\n    import './styles/index.scss';\n    import preloadImages from './utils/imageLoader';\n    import { HashRouter, Switch, Route } from 'react-router-dom';\n    import { GAME_IMAGE_URLS, MENU_IMG_URLS } from './utils/constants';\n\n  //Components\n    import Game from \"./components/game\";\n\n    import HighScores from './components/highScores';\n\n    import MainMenu from './components/menu';\n\n    import Header from \"./components/header\";\n    \n    import Instructions from './components/instructions';\n\n\n\n//Main\nfunction App() {\n\n  // Keep track of what assets have been loaded\n  var [menuLoaded, setMenuLoaded] = useState(false);\n  var [gameLoaded, setGameLoaded] = useState(false);\n\n  // On start, preload all images for the menu and game\n  useEffect(()=>{\n\n    // We can render the menu first as soon as its assets are loaded\n    if(!menuLoaded){\n      preloadImages(MENU_IMG_URLS, ()=>setMenuLoaded(true));\n    }\n\n    // gameLoaded will be passed as a prop to the Game component,\n    // so if the user tries to play before the assets load they will\n    // get a loading screen\n    if(!gameLoaded){\n      preloadImages(GAME_IMAGE_URLS, ()=>setGameLoaded(true));\n    }\n  })\n\n  //If menu assets are not loaded, show a loading screen\n  if(!menuLoaded){\n    return (\n      <div className=\"App\">\n        <Header/>\n\n        <section>\n          <h1>Loading...</h1>\n\n          <div className=\"lds-circle\"><div></div></div>\n        </section>\n        \n      \n      </div>\n    )\n  }\n\n  // Don't show the header on the game screen if the device is too short\n  let header = <Header />;\n  \n  if(window.innerHeight < 600){\n    header = null;\n  }\n\n  return (\n\n    <div className=\"App\">\n      <HashRouter>\n\n        <Switch>\n\n          <Route path=\"/game\">\n            {header}\n          </Route>\n\n          <Route path=\"/\">\n            <Header />\n          </Route> \n          \n        </Switch>\n      \n      \n        <Switch>\n\n          <Route path=\"/instructions\">\n            <Instructions />\n          </Route>\n\n          <Route path=\"/game\">\n            <Game loaded={gameLoaded}/>\n          </Route>\n          \n          <Route path=\"/high-scores\">\n            <HighScores />\n          </Route>\n\n          <Route path=\"/\">\n            <MainMenu/>\n          </Route>\n          \n        </Switch>\n          \n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App.jsx';\n\n//Initialize high score list\n\nif(!localStorage.data || !JSON.parse(localStorage.data)){\n  localStorage.data = JSON.stringify({\n    scores:[\n      { name: \"Yendor\", rank: 14 },\n      { name: \"Elon\", rank: 13 },\n      { name: \"Harry Dresden\", rank:12 },\n      { name: \"Glinda\", rank: 11 },\n      { name: \"Gandalf the White\", rank: 9 },\n      { name: \"Gandalf the Gray\", rank: 8 },\n      { name: \"Hermione\", rank: 6 },\n      { name: \"Oz\", rank: 5 },\n      { name: \"Steve\", rank: 3 },\n      { name: \"Alfred\", rank: 2 },\n      { name: \"Morty\", rank: 1 }\n      \n    ]\n  })\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}