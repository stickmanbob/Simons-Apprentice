{"version":3,"sources":["assets/pentagram.png","assets/fizzle.gif","assets/redSprite.gif","assets/yellowSprite.gif","assets/greenSprite.gif","assets/blueSprite.gif","assets/greenOrb.png","assets/blueOrb.png","assets/redOrb.png","assets/yellowOrb.png","assets/background-desktop.jpg","assets/circle.jpg","utils/imageLoader.js","utils/constants.js","components/gameOver.jsx","components/summoningCircle.jsx","components/game.jsx","components/highScores.jsx","components/menu.jsx","components/header.jsx","App.jsx","index.js"],"names":["module","exports","preloadImages","urls","loadedCallback","loadedCount","totalImages","length","forEach","url","img","Image","src","onload","COLORS","MENU_IMG_URLS","require","GAME_IMAGE_URLS","GameOver","props","state","showHSInput","name","highScore","updateHighScores","bind","handleNameChange","rank","this","highScoreList","JSON","parse","localStorage","data","scores","console","log","lastPlayer","setState","e","preventDefault","target","value","className","onChange","type","onClick","reset","to","pop","push","sort","player1","player2","stringify","message","id","navButtons","React","Component","SummoningCircle","contents","Game","currentSprite","loaded","sequence","currentGuess","gameState","score","disableInputs","sprites","red","alt","yellow","green","blue","fizzle","handleInput","playSequence","resetGame","nextRound","newSequence","Array","from","newColor","Math","floor","random","i","sleep","time","Promise","res","setTimeout","updateSequence","buttonColor","a","newSprite","nextGuess","gameOver","startButton","nextButton","mainWindow","selectMainWindow","enableButtons","selectMessage","draggable","HighScores","map","player","idx","key","MainMenu","Header","App","useState","menuLoaded","setMenuLoaded","gameLoaded","setGameLoaded","useEffect","header","window","innerHeight","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e94068be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pentagram.ae5d5114.png\";","module.exports = __webpack_public_path__ + \"static/media/fizzle.8c4e8a93.gif\";","module.exports = __webpack_public_path__ + \"static/media/redSprite.829b5c15.gif\";","module.exports = __webpack_public_path__ + \"static/media/yellowSprite.49a3dbf3.gif\";","module.exports = __webpack_public_path__ + \"static/media/greenSprite.ea067f66.gif\";","module.exports = __webpack_public_path__ + \"static/media/blueSprite.b6c13a15.gif\";","module.exports = __webpack_public_path__ + \"static/media/greenOrb.0ecc18da.png\";","module.exports = __webpack_public_path__ + \"static/media/blueOrb.fd1f041c.png\";","module.exports = __webpack_public_path__ + \"static/media/redOrb.50e75402.png\";","module.exports = __webpack_public_path__ + \"static/media/yellowOrb.ea689330.png\";","module.exports = __webpack_public_path__ + \"static/media/background-desktop.400823fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/circle.b9ff05f9.jpg\";","export default function preloadImages(urls, loadedCallback) {\n    let loadedCount = 0;\n    let totalImages = urls.length;\n    \n    urls.forEach( (url) => {\n        let img = new Image();\n        img.src = url;\n        img.onload= () => {\n          \n            loadedCount ++;\n\n            // console.log(\"images loaded\", loadedCount);\n\n            if(loadedCount === totalImages) {\n                // console.log(\"all images loaded\")\n                loadedCallback(); \n            }\n        }\n    });\n\n\n    \n}","//////////////// Constants /////////////////////////\n//\n// Dashboard file for modifying game constants \n//\n\n\n// Length of Simon's elemental animations, in ms\nexport const SIMON_GIF_LENGTH = 1300;\n\n// Length of Player's elemental animations, in ms\nexport const PLAYER_GIF_LENGTH = 1300;\n\n// Length of Fizzle animation, in ms\nexport const FIZZLE_LENGTH = 1600;\n\n// Valid colors\nexport const COLORS = [\"red\", \"blue\", \"yellow\", \"green\"]; \n\n//Main Menu asset paths\nexport const MENU_IMG_URLS = [\n    require(\"../assets/background-desktop.jpg\")\n]\n\n// All game image asset paths\nexport const GAME_IMAGE_URLS = [\n    require(\"../assets/fizzle.gif\"),\n    require(\"../assets/redSprite.gif\"),\n    require(\"../assets/yellowSprite.gif\"),\n    require(\"../assets/greenSprite.gif\"),\n    require(\"../assets/blueSprite.gif\"),\n    require(\"../assets/circle.jpg\"),\n    require(\"../assets/pentagram.png\"),\n    require(\"../assets/greenOrb.png\"),\n    require(\"../assets/blueOrb.png\"),\n    require(\"../assets/redOrb.png\"),\n    require(\"../assets/yellowOrb.png\"),\n]","///////////////// Game Over ////////////////\n// Displays the game over screen, and handles logic to\n// add new high scores\n// \n// Props:\n// - rank (integer) : the final score of the player\n// - reset (function) : a function to reset the game\n//\n\n//Imports\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Main\n\nexport default class GameOver extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        // Initialize state\n        this.state = {\n            showHSInput: false,\n            name: \"Apprentice\",\n            highScore: false\n        }\n\n        // Function Bindings\n        this.updateHighScores = this.updateHighScores.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);  \n    }\n\n    componentDidMount(){\n        \n        const { rank } = this.props;\n\n        //Fetch the current high scores\n        this.highScoreList = JSON.parse(localStorage.data).scores;\n\n        console.log(this.highScoreList)\n        // If the player's rank is higher than the lowest high score, or\n        // there are fewer than 15 high scores, render the name input \n\n        //Avoid bugs due to empty score lists\n        let lastPlayer = this.highScoreList[this.highScoreList.length - 1] || {rank:0};\n\n        if ((this.highScoreList.length < 15 && rank > 0) || rank > lastPlayer.rank) {\n\n            this.setState({\n                showHSInput: true,\n                highScore: true\n            })\n\n        }\n    }\n\n    handleNameChange(e){\n        e.preventDefault();\n\n        this.setState({\n            name: e.target.value\n        })\n    }\n\n    navButtons(){\n\n        if (!this.state.showHSInput){\n            return (\n                <nav>\n                    <div onClick={this.props.reset} className=\"button\">Try Again</div>\n                    <Link to=\"/high-scores\" >Honor Scroll</Link>\n                </nav>\n                \n            )\n        } else {\n            return (\n\n                <form>\n                    <h3>Enter your name, Apprentice</h3>\n                    <input className=\"no-text-outline\" onChange={this.handleNameChange} value={this.state.name} type=\"text\"/>\n                    <input className=\"button\" type=\"submit\" onClick={this.updateHighScores}/>\n                </form>\n            )\n        }\n\n    }\n\n    updateHighScores(e){\n        e.preventDefault();\n\n        if(this.state.name.length === 0) return; \n\n        const name = this.state.name;\n        const rank = this.props.rank;\n\n        if(this.highScoreList.length >=15) this.highScoreList.pop(); \n\n        this.highScoreList.push({ name: name, rank: rank});\n        this.highScoreList.sort((player1, player2) => player2.rank - player1.rank);\n\n        localStorage.data = JSON.stringify({\n            scores: this.highScoreList\n        })\n\n        this.setState({\n            showHSInput: false,\n        })\n    }\n\n\n    render(){\n\n        const { rank } = this.props;\n        let { highScore } = this.state;\n        \n        let message;\n        if(highScore) {\n            message = <h3>...but you made the Honor Scroll for reaching Rank {rank}!</h3>\n        } else{\n            message = <h3>...but you reached Apprentice Rank {rank}!</h3>\n        }\n\n        return (\n            <section id=\"game-over\">\n\n                <h1>You Fizzled the Spell!</h1>\n\n                {message} \n\n                {this.navButtons()}\n            </section>\n        )\n    }\n    \n}\n","\nimport React from 'react';\n\n\nexport default function SummoningCircle({contents}){\n    \n    return(\n\n        <div className=\"summoning-circle\">\n            {contents}\n        </div>\n    )\n}","///////////// Game /////////////////\n//\n// Renders the game itself and handles game logic\n// \n// Props:\n// - loaded(boolean) : lets us know if the App component has loaded all our images yet\n\n\n// Imports\n\n  //Utils\n  import React from 'react';\n  import { SIMON_GIF_LENGTH, PLAYER_GIF_LENGTH, FIZZLE_LENGTH, COLORS, IMAGE_URLS } from '../utils/constants';\n\n  //Components\n  import GameOver from './gameOver';\n  import SummoningCircle from './summoningCircle';\n\n    \n//Main\n\n\n\nexport default class Game extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        //Set inital game state\n        this.state = {\n            currentSprite: null,\n            loaded:true,\n            sequence: [\"red\"],\n            currentGuess: 0,\n            gameState: \"start\",\n            score: 0,\n            disableInputs: true \n        }\n\n        // Create references to sprites we will use here\n        this.sprites = {\n            red: <img src={require(\"../assets/redSprite.gif\")} alt=\"red\" />,\n            yellow: <img src={require(\"../assets/yellowSprite.gif\")} alt=\"yellow\" />,\n            green: <img src={require(\"../assets/greenSprite.gif\")} alt=\"green\" />,\n            blue: <img src={require(\"../assets/blueSprite.gif\")} alt=\"blue\" />,\n            fizzle: <img className=\"fizzle\" src={require(\"../assets/fizzle.gif\")} alt=\"fizzle!\" />,\n        }\n        \n\n        // Function Bindings\n        this.handleInput = this.handleInput.bind(this);  \n        this.playSequence = this.playSequence.bind(this); \n        this.resetGame = this.resetGame.bind(this);\n        this.nextRound = this.nextRound.bind(this); \n    }\n\n\n    updateSequence(){\n        \n        // Create a copy of the old sequence to avoid mutating state\n        let newSequence = Array.from(this.state.sequence);\n\n        //Generate a random new color\n        let newColor = COLORS[Math.floor(Math.random()*4)];\n\n        //Add to sequence and update state\n        newSequence.push(newColor);\n\n        this.setState({ sequence: newSequence });\n\n    }\n\n    async playSequence(){\n        if(this.state.gameState !== 'simon-turn') await this.setState({gameState: 'simon-turn'}); \n        //Play the current sequence\n        for(let i = 0; i < this.state.sequence.length ; i++){\n\n            // Display an elemental\n            this.setState({ currentSprite: this.sprites[this.state.sequence[i]] } );\n            \n            //Wait for the gif to end\n            await this.sleep(SIMON_GIF_LENGTH);\n            \n            //Remove the Elemental, and control to the player if its the last one\n\n            if(i === this.state.sequence.length-1){\n                this.setState({\n                    currentSprite: null,\n                    disableInputs: false,\n                    gameState: \"player-turn\"\n                }) \n            } else{\n                this.setState({ currentSprite: null, })\n\n            }\n            \n            //Give a gap between Elementals\n            await this.sleep(400);     \n            \n        }\n        \n    }\n\n    sleep(time) {\n        return new Promise(res => setTimeout(res, time));\n    }\n\n    nextGuess(){\n        this.setState({\n            currentSprite: null,\n            currentGuess: this.state.currentGuess + 1,\n            disableInputs: false,\n        })\n    }\n\n    nextRound(){\n\n        // First, add a new elemental to the sequence\n        this.updateSequence(); \n\n        // Reset the game board\n        this.setState({\n            currentSprite: null,\n            gameState: \"\",\n            currentGuess: 0,\n            disableInputs: true\n        })\n\n        // Play the new sequence\n        this.playSequence(); \n    }\n\n    resetGame(){\n        this.setState({\n            currentSprite: null,\n            sequence: [\"red\"],\n            currentGuess: 0,\n            gameState: \"start\",\n            score: 0\n        })\n    }\n\n    async gameOver(){\n        \n        //Play the fizzle animation\n        this.setState({\n            currentSprite: this.sprites.fizzle,\n            disableInputs: true\n        })\n\n        await this.sleep(FIZZLE_LENGTH);\n\n        //Show the game over screen\n        this.setState({\n            gameState: \"gameOver\",\n        })\n    }\n\n    handleInput(buttonColor){\n        \n        // If buttons are disabled, return a handler that does nothing\n        if(this.state.disableInputs) return (e) => e.preventDefault(); \n\n        // Return an event handler that has access to the buttonColor parameter\n        return async (e) =>{\n            \n            e.preventDefault();\n\n            var { sequence, currentGuess } = this.state;\n\n            // Check if the input is correct\n            if(buttonColor === sequence[currentGuess]){ // If its a correct guess:\n                \n                // Decide which sprite to render next based on buttonColor parameter\n                let newSprite = this.sprites[buttonColor] || null;\n\n                // Update the current sprite in state and prevent further inputs\n                this.setState({\n                    currentSprite: newSprite,\n                    disableInputs: true, \n                })\n\n                // Wait for the gif to play\n                await this.sleep(PLAYER_GIF_LENGTH);\n\n                // If that was the last item, go to the inter round screen\n                if(currentGuess === sequence.length -1){\n                    \n                    this.setState({\n                        gameState: \"interRound\",\n                        currentSprite: null,\n                        score: this.state.score + 1,\n                        disableInputs: true,\n                    });\n                \n                // Otherwise, let the user keep summoning elementals\n                } else {\n                    this.nextGuess(); \n                }\n            \n            } else { // On a wrong guess, end the game\n                this.gameOver();\n            }\n   \n\n        }\n        \n    }\n\n    selectMessage(){\n        let gameState = this.state.gameState;\n\n        switch (gameState){\n            case \"simon-turn\":\n                return (\n                    <h1>Watch closely...</h1>\n                );\n            case \"player-turn\":\n                return(\n                    <h1>Use the Orbs to Summon the Elementals in the Correct Order</h1>\n                );\n            case \"start\":\n                return (\n                    <div>\n                        <h1>We will begin when you are ready</h1>\n                        <h3>Touch the red pentagram to begin</h3>\n                    </div>\n                    \n                )\n            case \"interRound\":\n                return(\n                    <div>\n                        <h1>Good Job, Apprentice!</h1>\n                        <h2>You have reached Rank {this.state.score}</h2>\n                        <h3>Touch the red pentagram to continue</h3>\n                    </div>\n                )\n            default:\n                return null;\n        }\n    }\n\n    selectMainWindow() {\n        let gameState = this.state.gameState;\n\n        switch (gameState) {\n\n            case 'start':\n                let startButton = <img className=\"start-button\" src={require(\"../assets/pentagram.png\")} onClick={this.playSequence} alt=\"start\"/>;\n                return <SummoningCircle contents={startButton} />\n\n            case 'interRound':\n                let nextButton = <img className=\"start-button\" src={require(\"../assets/pentagram.png\")} onClick={this.nextRound} alt=\"next round\"/>;\n                return <SummoningCircle contents={nextButton} />;\n\n            default:\n                return <SummoningCircle contents={this.state.currentSprite} />;\n        }\n    }\n\n\n    render(){\n\n        let rank = this.state.score;\n\n        if(!this.props.loaded) return (\n            <section>\n                <h1>Loading...</h1>\n            </section>\n        );\n\n        if (this.state.gameState === \"gameOver\") return <GameOver rank={this.state.score} reset={this.resetGame} />;\n\n        let mainWindow = this.selectMainWindow();\n\n        let enableButtons = this.state.disableInputs ? \"\" : \"enable\"\n\n        let message = this.selectMessage();\n\n        return(\n            \n            <section id=\"game\">\n                <div className=\"message-box\">\n                    {message}\n                </div>\n                \n\n                <div className=\"main-window\">\n                    {mainWindow}\n                </div>\n\n                <div className=\"game-buttons\">\n                    \n                    <img className={`orb red ${enableButtons}`} draggable=\"false\" src={require(\"../assets/redOrb.png\")} onClick={this.handleInput(\"red\")} alt=\"red\"/>\n\n                    <img className={`orb green ${enableButtons}`} draggable=\"false\" src={require(\"../assets/greenOrb.png\")} onClick={this.handleInput(\"green\")} alt=\"green\"/>\n                        \n                    <img className={`orb yellow ${enableButtons}`} draggable=\"false\" src={require(\"../assets/yellowOrb.png\")} onClick={this.handleInput(\"yellow\")} alt=\"blue\"/>\n\n                    <img className={`orb blue ${enableButtons}`} draggable=\"false\" src={require(\"../assets/blueOrb.png\")} onClick={this.handleInput(\"blue\")} alt=\"yellow\"/>\n\n                </div>\n                <div>\n                    <span className=\"rank-counter\">Apprentice Rank: {rank}</span>\n                </div>\n            </section>\n        );\n    }\n}","/////////////// High Score Screen ////////////////////\n// \n// Renders the high score screen. Scores are stored in local storage\n//\n// Props:\n//\n\n// Imports\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n//Main\n\nexport default function HighScores(){\n    \n    let highScoreList = JSON.parse(localStorage.data).scores; \n\n    console.log(highScoreList); \n    return(\n        <section id=\"high-scores\">\n            <h1>Honored Apprentices</h1>\n\n            <table>\n                <tr>\n                    <th>#</th> <th>Name</th> <th>Rank</th>\n                </tr>\n\n                {\n                    highScoreList.map((player, idx) => {\n\n                        return <tr className=\"score\" key={idx}>\n                            <td>{idx}</td> <td>{player.name}</td> <td>{player.rank}</td>\n                        </tr>\n                    })\n                }\n            </table>\n            \n\n            <Link to=\"/game\" className=\"no-text-outline\">Play Again!</Link>\n            <Link to=\"/\" className=\"no-text-outline\">Main Menu</Link>\n        </section>\n\n    )\n}","////////////// Main Menu ////////////////////////////\n//\n// Has links to instructions , high scores, and game\n//\n\n//Imports\n  import React from \"react\";\n  import { Link } from \"react-router-dom\";\n\n\nexport default function MainMenu(){\n\n\n    return(\n        <section id=\"main-menu\">\n            <h1>Welcome, Apprentice</h1>\n            \n            <nav>\n                <Link to=\"/game\">Play</Link>\n                \n                <Link to=\"/instructions\">Instructions</Link>\n\n                <Link to=\"/high-scores\">High Scores</Link>\n            </nav>\n        </section>\n    )\n}","///////////// Header ///////////////////////\n//\n// A simple header\n//\n\nimport React from \"react\";\n\nexport default function Header(){\n\n    return(\n        <header id=\"header\">\n            <h1>\n                Simon's Apprentice\n            </h1>\n        </header>\n    )\n}","///////////////// App.js /////////////////////////////\n// Entry point into the React App\n//\n\n//Imports\n\n  //Utils\n    import React, { useState, useEffect } from 'react';\n    import './styles/index.scss';\n    import preloadImages from './utils/imageLoader';\n    import { HashRouter, Switch, Route, Link } from 'react-router-dom';\n    import { GAME_IMAGE_URLS, MENU_IMG_URLS } from './utils/constants';\n\n  //Components\n    import Game from \"./components/game\";\n\n    import HighScores from './components/highScores';\n\n    import MainMenu from './components/menu';\n\n    import Header from \"./components/header\";\n\n\n\n//Main\nfunction App() {\n\n  // Keep track of what assets have been loaded\n  var [menuLoaded, setMenuLoaded] = useState(false);\n  var [gameLoaded, setGameLoaded] = useState(false);\n\n  // On start, preload all images for the menu and game\n  useEffect(()=>{\n\n    // We can render the menu first as soon as its assets are loaded\n    if(!menuLoaded){\n      preloadImages(MENU_IMG_URLS, ()=>setMenuLoaded(true));\n    }\n\n    // gameLoaded will be passed as a prop to the Game component,\n    // so if the user tries to play before the assets load they will\n    // get a loading screen\n    if(!gameLoaded){\n      preloadImages(GAME_IMAGE_URLS, ()=>setGameLoaded(true));\n    }\n  })\n\n  //If menu assets are not loaded, show a loading screen\n  if(!menuLoaded){\n    return (\n      <div>Loading...</div>\n    )\n  }\n\n  // Don't show the header on the game screen if the device is too short\n  let header = <Header />;\n  console.log(window.innerHeight)\n  if(window.innerHeight < 600){\n    header = null;\n  }\n\n  return (\n\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n\n          <Route path=\"/game\">\n            {header}\n          </Route>\n\n          <Route path=\"/\">\n            <Header />\n          </Route> \n          \n        </Switch>\n      \n      \n        <Switch>\n\n          <Route path=\"/game\">\n            <Game loaded={gameLoaded}/>\n          </Route>\n          \n          <Route path=\"/high-scores\">\n            <HighScores />\n          </Route>\n\n          <Route path=\"/\">\n            <MainMenu/>\n          </Route>\n          \n        </Switch>\n          \n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App.jsx';\n\n//Initialize high score list\n\nif(!JSON.parse(localStorage.data)){\n  localStorage.data = JSON.stringify({\n    scores:[\n      {name: \"Harry Dresden\", rank:30 }\n    ]\n  })\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}